// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NextCore.backend.Context;

#nullable disable

namespace NextCore.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250121090310_AppDbContext")]
    partial class AppDbContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BorrowedBook", b =>
                {
                    b.Property<int>("copyId")
                        .HasColumnType("int");

                    b.Property<int>("borrowId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("returnDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("copyId", "borrowId");

                    b.HasIndex("borrowId");

                    b.ToTable("BorrowedBooks");

                    b.HasData(
                        new
                        {
                            copyId = 1,
                            borrowId = 1
                        },
                        new
                        {
                            copyId = 12,
                            borrowId = 1
                        },
                        new
                        {
                            copyId = 2,
                            borrowId = 2
                        },
                        new
                        {
                            copyId = 6,
                            borrowId = 2
                        },
                        new
                        {
                            copyId = 11,
                            borrowId = 2
                        },
                        new
                        {
                            copyId = 13,
                            borrowId = 3
                        },
                        new
                        {
                            copyId = 3,
                            borrowId = 4,
                            returnDate = new DateTime(2025, 1, 10, 15, 30, 23, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("NextCore.backend.Models.Account", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("accessToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("expiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("provider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("providerAccountId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("refreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("scope")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("tokenType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("varchar(16)");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("NextCore.backend.Models.Author", b =>
                {
                    b.Property<int>("authorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("authorId"));

                    b.Property<string>("authorEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("authorPhone")
                        .HasColumnType("longtext");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("lastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("authorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            authorId = 1,
                            authorEmail = "leilachudori@gmail.com",
                            authorPhone = "089685940123",
                            firstName = "Leila S.",
                            lastName = "Chudori"
                        },
                        new
                        {
                            authorId = 2,
                            authorEmail = "chungserang@gmail.com",
                            authorPhone = "087524691239",
                            firstName = "Chung",
                            lastName = "Serang"
                        },
                        new
                        {
                            authorId = 3,
                            authorEmail = "josteingaarder@gmail.com",
                            authorPhone = "085689959959",
                            firstName = "Jostein",
                            lastName = "Gaarder"
                        });
                });

            modelBuilder.Entity("NextCore.backend.Models.Authorship", b =>
                {
                    b.Property<int>("authorshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("authorshipId"));

                    b.Property<int>("authorId")
                        .HasColumnType("int");

                    b.Property<string>("bookId")
                        .IsRequired()
                        .HasColumnType("varchar(13)");

                    b.HasKey("authorshipId");

                    b.HasIndex("authorId");

                    b.HasIndex("bookId");

                    b.ToTable("Authorships");

                    b.HasData(
                        new
                        {
                            authorshipId = 1,
                            authorId = 1,
                            bookId = "9786024246945"
                        },
                        new
                        {
                            authorshipId = 2,
                            authorId = 2,
                            bookId = "9786231864482"
                        },
                        new
                        {
                            authorshipId = 3,
                            authorId = 3,
                            bookId = "9786024410209"
                        });
                });

            modelBuilder.Entity("NextCore.backend.Models.Book", b =>
                {
                    b.Property<string>("bookId")
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("country")
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("datePublished")
                        .HasColumnType("date");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("language")
                        .HasColumnType("longtext");

                    b.Property<string>("mediaType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("totalPage")
                        .HasColumnType("int");

                    b.HasKey("bookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            bookId = "9786024246945",
                            datePublished = new DateOnly(2017, 12, 21),
                            description = "Laut Bercerita, novel terbaru Leila S. Chudori, bertutur tentang kisah keluarga yang kehilangan, sekumpulan sahabat yang merasakan kekosongan di dada, sekelompok orang yang gemar menyiksa dan lancar berkhianat, sejumlah keluarga yang mencari kejelasan makam anaknya, dan tentang cinta yang tak akan luntur.",
                            image = "",
                            mediaType = "[0, 0, 0]",
                            title = "Laut Bercerita",
                            totalPage = 400
                        },
                        new
                        {
                            bookId = "9786231864482",
                            datePublished = new DateOnly(2025, 1, 9),
                            description = "“Kita harus mengadakan jesa untuk Ibu.” Masalahnya, ibu mereka, Shim Sisun sang seniman kontroversial, benci jesa—upacara perkabungan khas Korea. Baginya, upacara itu hanya membebani kaum perempuan sebagai “panitia abadi” jesa. Sepuluh tahun setelah kematian Sisun, putri sulungnya mengusulkan jesa untuk ibunya di Hawaii, perantauan pertama Sisun. Bedanya, sesajen jesa akan diganti dengan benda-benda yang paling mengingatkan setiap mereka kepada Sisun. Benda apa yang mereka persembahkan? Bagaimana cerita di balik benda-benda itu? Atau... siapa sebenarnya Shim Sisun?",
                            image = "",
                            mediaType = "[0, 0, 0]",
                            title = "Dunia Sisun",
                            totalPage = 372
                        },
                        new
                        {
                            bookId = "9786024410209",
                            datePublished = new DateOnly(2020, 6, 4),
                            description = "Sophie, seorang pelajar sekolah menengah berusia empat belas tahun. Suatu hari sepulang sekolah, dia mendapat sebuah surat misterius yang hanya berisikan satu pertanyaan: “Siapa kamu?” Belum habis keheranannya, pada hari yang sama dia mendapat surat lain yang bertanya: “Dari manakah datangnya dunia?” Seakan tersentak dari rutinitas hidup sehari-hari, surat-surat itu membuat Sophie mulai mempertanyakan soal-soal mendasar yang tak pernah dipikirkannya selama ini. Dia mulai belajar filsafat.",
                            image = "",
                            mediaType = "[0, 0, 0]",
                            title = "Dunia Sophie",
                            totalPage = 798
                        });
                });

            modelBuilder.Entity("NextCore.backend.Models.BookCopy", b =>
                {
                    b.Property<int>("copyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("copyId"));

                    b.Property<string>("bookId")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("copyId");

                    b.HasIndex("bookId");

                    b.ToTable("BookCopies", (string)null);

                    b.HasData(
                        new
                        {
                            copyId = 1,
                            bookId = "9786024246945",
                            status = "Borrowed"
                        },
                        new
                        {
                            copyId = 2,
                            bookId = "9786024246945",
                            status = "Pending"
                        },
                        new
                        {
                            copyId = 3,
                            bookId = "9786024246945",
                            status = "Available"
                        },
                        new
                        {
                            copyId = 4,
                            bookId = "9786024246945",
                            status = "Available"
                        },
                        new
                        {
                            copyId = 5,
                            bookId = "9786024246945",
                            status = "Available"
                        },
                        new
                        {
                            copyId = 6,
                            bookId = "9786231864482",
                            status = "Pending"
                        },
                        new
                        {
                            copyId = 7,
                            bookId = "9786231864482",
                            status = "Available"
                        },
                        new
                        {
                            copyId = 8,
                            bookId = "9786231864482",
                            status = "Available"
                        },
                        new
                        {
                            copyId = 9,
                            bookId = "9786231864482",
                            status = "Available"
                        },
                        new
                        {
                            copyId = 10,
                            bookId = "9786231864482",
                            status = "Available"
                        },
                        new
                        {
                            copyId = 11,
                            bookId = "9786024410209",
                            status = "Pending"
                        },
                        new
                        {
                            copyId = 12,
                            bookId = "9786024410209",
                            status = "Borrowed"
                        },
                        new
                        {
                            copyId = 13,
                            bookId = "9786024410209",
                            status = "Borrowed"
                        },
                        new
                        {
                            copyId = 14,
                            bookId = "9786024410209",
                            status = "Available"
                        },
                        new
                        {
                            copyId = 15,
                            bookId = "9786024410209",
                            status = "Available"
                        });
                });

            modelBuilder.Entity("NextCore.backend.Models.BookGenre", b =>
                {
                    b.Property<string>("bookId")
                        .HasColumnType("varchar(13)");

                    b.Property<int>("genreId")
                        .HasColumnType("int");

                    b.HasKey("bookId", "genreId");

                    b.HasIndex("genreId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            bookId = "9786024246945",
                            genreId = 1
                        },
                        new
                        {
                            bookId = "9786024246945",
                            genreId = 2
                        },
                        new
                        {
                            bookId = "9786231864482",
                            genreId = 1
                        },
                        new
                        {
                            bookId = "9786231864482",
                            genreId = 2
                        },
                        new
                        {
                            bookId = "9786024410209",
                            genreId = 1
                        },
                        new
                        {
                            bookId = "9786024410209",
                            genreId = 3
                        });
                });

            modelBuilder.Entity("NextCore.backend.Models.BookPublished", b =>
                {
                    b.Property<int>("bookPublishedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("bookPublishedId"));

                    b.Property<string>("bookId")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<int>("publisherId")
                        .HasColumnType("int");

                    b.HasKey("bookPublishedId");

                    b.HasIndex("bookId");

                    b.HasIndex("publisherId");

                    b.ToTable("BooksPublished");

                    b.HasData(
                        new
                        {
                            bookPublishedId = 1,
                            bookId = "9786024246945",
                            publisherId = 1
                        },
                        new
                        {
                            bookPublishedId = 2,
                            bookId = "9786231864482",
                            publisherId = 2
                        },
                        new
                        {
                            bookPublishedId = 3,
                            bookId = "9786024410209",
                            publisherId = 3
                        });
                });

            modelBuilder.Entity("NextCore.backend.Models.Borrow", b =>
                {
                    b.Property<int>("borrowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("borrowId"));

                    b.Property<DateOnly?>("borrowDate")
                        .HasColumnType("date");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("returnDate")
                        .HasColumnType("date");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("varchar(16)");

                    b.HasKey("borrowId");

                    b.HasIndex("userId");

                    b.ToTable("Borrows");

                    b.HasData(
                        new
                        {
                            borrowId = 1,
                            borrowDate = new DateOnly(2025, 1, 17),
                            duration = 7,
                            returnDate = new DateOnly(2025, 1, 24),
                            status = "Approved",
                            userId = "337504440000002"
                        },
                        new
                        {
                            borrowId = 2,
                            duration = 3,
                            status = "Pending",
                            userId = "447502220000003"
                        },
                        new
                        {
                            borrowId = 3,
                            duration = 5,
                            status = "Approved",
                            userId = "337502220000004"
                        },
                        new
                        {
                            borrowId = 4,
                            borrowDate = new DateOnly(2025, 1, 4),
                            duration = 7,
                            returnDate = new DateOnly(2025, 1, 11),
                            status = "Approved",
                            userId = "337504440000002"
                        });
                });

            modelBuilder.Entity("NextCore.backend.Models.Cart", b =>
                {
                    b.Property<int>("cartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("cartId"));

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("cartId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            cartId = 1,
                            userId = "337502220000004"
                        },
                        new
                        {
                            cartId = 2,
                            userId = "337504440000002"
                        },
                        new
                        {
                            cartId = 3,
                            userId = "447502220000003"
                        });
                });

            modelBuilder.Entity("NextCore.backend.Models.CartDetail", b =>
                {
                    b.Property<int>("cartId")
                        .HasColumnType("int");

                    b.Property<string>("bookId")
                        .HasColumnType("varchar(13)");

                    b.HasKey("cartId", "bookId");

                    b.HasIndex("bookId");

                    b.ToTable("CartDetails");

                    b.HasData(
                        new
                        {
                            cartId = 1,
                            bookId = "9786231864482"
                        });
                });

            modelBuilder.Entity("NextCore.backend.Models.Genre", b =>
                {
                    b.Property<int>("genreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("genreId"));

                    b.Property<string>("genreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("genreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            genreId = 1,
                            genreName = "Fiksi"
                        },
                        new
                        {
                            genreId = 2,
                            genreName = "Sejarah"
                        },
                        new
                        {
                            genreId = 3,
                            genreName = "Novel"
                        });
                });

            modelBuilder.Entity("NextCore.backend.Models.Publisher", b =>
                {
                    b.Property<int>("publisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("publisherId"));

                    b.Property<string>("publisherEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("publisherName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("publisherPhone")
                        .HasColumnType("longtext");

                    b.HasKey("publisherId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            publisherId = 1,
                            publisherEmail = "gramedia@gmail.com",
                            publisherName = "Kepustakaan Populer Gramedia"
                        },
                        new
                        {
                            publisherId = 2,
                            publisherEmail = "bentang@gmail.com",
                            publisherName = "Bentang Pustaka"
                        },
                        new
                        {
                            publisherId = 3,
                            publisherEmail = "mizan@gmail.com",
                            publisherName = "Mizan Publishing"
                        });
                });

            modelBuilder.Entity("NextCore.backend.Models.Session", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("expires")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("sessionToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("varchar(16)");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("NextCore.backend.Models.User", b =>
                {
                    b.Property<string>("userId")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("imageKtpPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("lastName")
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .HasColumnType("longtext");

                    b.Property<string>("userEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("userPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("userId");

                    b.HasIndex("userEmail")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            userId = "337502220000004",
                            firstName = "Aldisar",
                            imageKtpPath = "",
                            lastName = "Gibran",
                            userEmail = "aldisarg@gmail.com",
                            userPhone = "085173043375"
                        },
                        new
                        {
                            userId = "337504440000002",
                            firstName = "Gibran",
                            imageKtpPath = "",
                            userEmail = "gibranaldisar@gmail.com",
                            userPhone = "089685555555"
                        },
                        new
                        {
                            userId = "447502220000003",
                            firstName = "Aldisar",
                            imageKtpPath = "",
                            userEmail = "alcendol@gmail.com",
                            userPhone = "085173045595"
                        });
                });

            modelBuilder.Entity("BorrowedBook", b =>
                {
                    b.HasOne("NextCore.backend.Models.Borrow", "Borrow")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("borrowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NextCore.backend.Models.BookCopy", "BookCopy")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("copyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookCopy");

                    b.Navigation("Borrow");
                });

            modelBuilder.Entity("NextCore.backend.Models.Account", b =>
                {
                    b.HasOne("NextCore.backend.Models.User", "user")
                        .WithMany("accounts")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("NextCore.backend.Models.Authorship", b =>
                {
                    b.HasOne("NextCore.backend.Models.Author", "Author")
                        .WithMany("Authorships")
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextCore.backend.Models.Book", "Book")
                        .WithMany("Authorships")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("NextCore.backend.Models.BookCopy", b =>
                {
                    b.HasOne("NextCore.backend.Models.Book", "book")
                        .WithMany("BookCopies")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");
                });

            modelBuilder.Entity("NextCore.backend.Models.BookGenre", b =>
                {
                    b.HasOne("NextCore.backend.Models.Book", "book")
                        .WithMany("BookGenres")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextCore.backend.Models.Genre", "genre")
                        .WithMany("bookGenres")
                        .HasForeignKey("genreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("genre");
                });

            modelBuilder.Entity("NextCore.backend.Models.BookPublished", b =>
                {
                    b.HasOne("NextCore.backend.Models.Book", "Book")
                        .WithMany("BooksPublished")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextCore.backend.Models.Publisher", "publisher")
                        .WithMany("BooksPublished")
                        .HasForeignKey("publisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("publisher");
                });

            modelBuilder.Entity("NextCore.backend.Models.Borrow", b =>
                {
                    b.HasOne("NextCore.backend.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("NextCore.backend.Models.CartDetail", b =>
                {
                    b.HasOne("NextCore.backend.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextCore.backend.Models.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("cartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("NextCore.backend.Models.Session", b =>
                {
                    b.HasOne("NextCore.backend.Models.User", "user")
                        .WithMany("sessions")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("NextCore.backend.Models.Author", b =>
                {
                    b.Navigation("Authorships");
                });

            modelBuilder.Entity("NextCore.backend.Models.Book", b =>
                {
                    b.Navigation("Authorships");

                    b.Navigation("BookCopies");

                    b.Navigation("BookGenres");

                    b.Navigation("BooksPublished");
                });

            modelBuilder.Entity("NextCore.backend.Models.BookCopy", b =>
                {
                    b.Navigation("BorrowedBooks");
                });

            modelBuilder.Entity("NextCore.backend.Models.Borrow", b =>
                {
                    b.Navigation("BorrowedBooks");
                });

            modelBuilder.Entity("NextCore.backend.Models.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("NextCore.backend.Models.Genre", b =>
                {
                    b.Navigation("bookGenres");
                });

            modelBuilder.Entity("NextCore.backend.Models.Publisher", b =>
                {
                    b.Navigation("BooksPublished");
                });

            modelBuilder.Entity("NextCore.backend.Models.User", b =>
                {
                    b.Navigation("accounts");

                    b.Navigation("sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
